name: CI

on:
  workflow_dispatch:
  push:
  pull_request:
  schedule:
    # Run daily at 01:34 so we get notified if CI is broken before a pull request
    # is submitted.
    - cron: "34 1 * * *"

permissions:
  contents: read

jobs:
  go-lint:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Create .env from secrets
        env:
          GH_ENV_FILE: ${{ secrets.APP_ENV_TEST }}
        run: |
          cd $(pwd)/resources/env/
          echo $GH_ENV_FILE | base64 --decode > app_test.env
          echo $GH_ENV_FILE | base64 --decode > app.env

      - name: Read build tags
        id: tags
        run: echo tags=$(cat .go-build-tags) >> $GITHUB_OUTPUT

      - name: Download formatters
        run: |
          go install golang.org/x/tools/cmd/goimports@v0.11.0
          go install mvdan.cc/gofumpt@v0.5.0

      - name: Check formatting
        run: |
          unformatted=$(
            gofumpt -l .
            goimports -l --local github.com/G-Research/fasttrackml .
          )
          if [ -n "$unformatted" ]; then
            for file in $unformatted; do
              echo "::error file=$file::$file is not formatted properly (hint: run \"make go-format\" to fix this)"
            done
            exit 1
          fi

      - name: Download mockery
        run: go install github.com/vektra/mockery/v2@v2.32.4

      - name: Generate mocks
        run: make mocks-generate

      - name: Check with go vet
        run: go vet --tags "${{ steps.tags.outputs.tags }}" ./...

      - uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.5"
          install-go: false
          build-tags: ${{ steps.tags.outputs.tags }}


  go-unit-tests:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Go Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Create .env from secrets
        env:
          GH_ENV_FILE: ${{ secrets.APP_ENV_TEST }}
        run: |
          cd $(pwd)/resources/env/
          echo $GH_ENV_FILE | base64 --decode > app_test.env
          echo $GH_ENV_FILE | base64 --decode > app.env


      - name: Download mockery
        run: go install github.com/vektra/mockery/v2@v2.32.4

      - name: Generate mocks
        run: make mocks-generate

      - name: Run Go Unit Tests
        run: make test-go-unit

  go-integration-tests:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Go Integration Tests (${{ matrix.database-backend }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database-backend: [postgres]
        include:
          - database-backend: postgres
            database-uri: postgres://postgres:postgres@postgres/postgres
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          
      - name: Create .env from secrets
        env:
          GH_ENV_FILE: ${{ secrets.APP_ENV_TEST }}
        run: |
          cd $(pwd)/resources/env/
          echo $GH_ENV_FILE | base64 --decode > app_test.env
          echo $GH_ENV_FILE | base64 --decode > app.env

      - name: Run Integration Tests
        run: make test-go-integration
        env:
          DOCKER_BUILDKIT: 1
          FML_DATABASE_URI: ${{ matrix.database-uri }}





  # Virtual job that can be configured as a required check before a PR can be merged.
  # As GitHub considers a check as successful if it is skipped, we need to check its status in
  # another workflow (check-required.yml) and create a check there.
  all-required-checks-done:
    name: All required checks done
    needs:
      - go-lint
      - go-unit-tests
      - go-integration-tests
    runs-on: ubuntu-latest
    steps:
      - run: echo "All required checks done"

  # Publish any push to a branch or tag to ghcr.io as a convenience
  # Actual release to Docker Hub happens in a different workflow
#   push-ghcr:
#     name: Push to GitHub Container Registry
#     if: github.event_name == 'push'
#     runs-on: ubuntu-latest
#     needs: all-required-checks-done
#     permissions:
#       packages: write
#     steps:
#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: fasttrackml-oci-image

#       - name: Login to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.repository_owner }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Compute repo name
#         id: repo
#         run: echo name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_OUTPUT

#       - name: Push to GitHub Container Registry
#         run: |
#           tags=$(tar -xOf fasttrackml-oci.tar index.json | jq -r '.manifests[].annotations."org.opencontainers.image.ref.name"')
#           for tag in $tags
#           do
#             echo "::group::Pushing image to ghcr.io/${{ steps.repo.outputs.name }}:$tag"
#             skopeo copy --all oci-archive:fasttrackml-oci.tar:$tag docker://ghcr.io/${{ steps.repo.outputs.name }}:$tag
#             echo "::endgroup::"
#           done
